{
    "contents" : "library(shiny)\n\n# Plotting \nlibrary(ggplot2)\nlibrary(rCharts)\nlibrary(ggvis)\n\n# Data processing libraries\nlibrary(data.table)\nlibrary(reshape2)\nlibrary(dplyr)\n\n# Required by includeMarkdown\nlibrary(markdown)\n\n# It has to loaded to plot ggplot maps on shinyapps.io\nlibrary(mapproj)\nlibrary(maps)\nlibrary(ggthemes)\n\n# Load helper functions\nsource(\"utils.R\", local = TRUE)\n\n\n# Load data\nstates_map <- map_data(\"state\")\nrawdt <- fread('data/StormData_to2015_after_aggregating.csv') %>% mutate(EVENT_TYPE = tolower(EVENT_TYPE))\n\nrawdt$STATE_NAME <- tolower(rawdt$STATE_NAME)\nrawdt$EVENT_TYPE <- sapply(rawdt$EVENT_TYPE, simpleCap)\n# Remove unsupported States\ndt <- rawdt[!rawdt$STATE_NAME %in% c(\"american samoa\", \"atlantic north\", \"atlantic south\", \"district of columbia\",\n                                     \"e pacific\", \"guam\", \"gulf of alaska\", \"gulf of mexico\", \"hawaii waters\", \"lake erie\", \"lake huron\", \n                                     \"lake michigan\", \"lake ontario\", \"lake st clair\", \"lake superior\", \"puerto rico\", \"st lawrence r\", \n                                     \"virgin islands\"),]\nevent_types <- sort(unique(dt$EVENT_TYPE))\n\n# Shiny server \nshinyServer(function(input, output, session) {\n  \n  # Define and initialize reactive values\n  values <- reactiveValues()\n  values$event_types <- event_types\n  \n  # Create event type checkbox\n  output$evtypeControls <- renderUI({\n    checkboxGroupInput('event_types', 'Event Types:', event_types, selected=values$event_types)\n  })\n  \n  # Add observers on clear and select all buttons\n  observe({\n    if(input$clear_all == 0) return()\n    values$event_types <- c()\n  })\n  \n  observe({\n    if(input$select_all == 0) return()\n    values$event_types <- event_types\n  })\n  \n  # Preapre datasets\n  \n  # Prepare dataset for maps\n  dt.agg <- reactive({\n    aggregate_by_state(dt, input$range[1], input$range[2], input$event_types)\n  })\n  \n  # Prepare dataset for time series\n  dt.agg.year <- reactive({\n    aggregate_by_year(dt, input$range[1], input$range[2], input$event_types)\n  })\n  \n  # Prepare dataset for downloads\n  dataTable <- reactive({\n    prepare_downloads(dt.agg())\n  })\n  \n  # Render Plots\n  \n  # Population impact by state\n  output$populationImpactByState <- renderPlot({\n    print(plot_impact_by_state (\n      dt = compute_affected(dt.agg(), input$populationCategory),\n      states_map = states_map, \n      year_min = input$range[1],\n      year_max = input$range[2],\n      title = \"Population Impact %d - %d (Number of Affected)\",\n      fill = \"Affected\"\n    ))\n  })\n  \n  # Economic impact by state\n  output$economicImpactByState <- renderPlot({\n    print(plot_impact_by_state(\n      dt = compute_damages(dt.agg(), input$economicCategory),\n      states_map = states_map, \n      year_min = input$range[1],\n      year_max = input$range[2],\n      title = \"Economic Impact %d - %d (Million USD)\",\n      fill = \"Damages\"\n    ))\n  })\n  \n  # Events by year\n  output$eventsByYear <- renderChart({\n    plot_events_by_year(dt.agg.year())\n  })\n  \n  # Population impact by year\n  output$populationImpact <- renderChart({\n    plot_impact_by_year(\n      dt = dt.agg.year() %>% select(Year, Injuries, Fatalities),\n      dom = \"populationImpact\",\n      yAxisLabel = \"Affected\",\n      desc = TRUE\n    )\n  })\n  \n  # Economic impact by state\n  output$economicImpact <- renderChart({\n    plot_impact_by_year(\n      dt = dt.agg.year() %>% select(Year, Crops, Property),\n      dom = \"economicImpact\",\n      yAxisLabel = \"Total Damage (Million USD)\"\n    )\n  })\n  \n  # Render data table and create download handler\n  output$table <- renderDataTable(\n{dataTable()}, options = list(bFilter = FALSE, iDisplayLength = 50))\n\noutput$downloadData <- downloadHandler(\n  filename = 'data.csv',\n  content = function(file) {\n    write.csv(dataTable(), file, row.names=FALSE)\n  }\n)\n})\n\n",
    "created" : 1434454691388.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3047772619",
    "id" : "73D90B07",
    "lastKnownWriteTime" : 1434474260,
    "path" : "D:/GitHub/Developing_Data_Products_Assessments/ShinyWeatherApp/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}