runApp()
library(shiny)
runApp()
runApp()
runApp()
aggregate_by_state <- function(dt, year_min, year_max, evtypes) {
replace_na <- function(x) ifelse(is.na(x), 0, x)
round_2 <- function(x) round(x, 2)
states <- data.table(STATE_NAME=sort(unique(dt$STATE_NAME)))
aggregated <- dt %>% filter(YEAR >= year_min, YEAR <= year_max, EVENT_TYPE %in% evtypes) %>%
group_by(STATE_NAME) %>%
summarise_each(funs(sum), COUNT:CROPS_DAMAGE)
# We want all states to be present even if nothing happened
left_join(states,  aggregated, by = "STATE_NAME") %>%
mutate_each(funs(replace_na), FATALITIES:CROPS_DAMAGE) %>%
mutate_each(funs(round_2), PROPERTY_DAMAGE, CROPS_DAMAGE)
}
rawdt <- fread('data/StormData_to2015_after_aggregating.csv') %>% mutate(EVENT_TYPE = tolower(EVENT_TYPE))
dt <- select(rawdt, YEAR, STATE_NAME, EVENT_TYPE, COUNT, FATALITIES, INJURIES, PROPERTY_DAMAGE, CROPS_DAMAGE)
event_types <- sort(unique(dt$EVENT_TYPE))
View(rawdt)
View(dt)
aggregate_by_state(dt, 1950, 2015, event_types)
aggregate_by_state <- function(dt, year_min, year_max, evtypes) {
replace_na <- function(x) ifelse(is.na(x), 0, x)
round_2 <- function(x) round(x, 2)
states <- data.table(STATE_NAME=sort(unique(dt$STATE_NAME)))
aggregated <- dt %>% filter(YEAR >= year_min, YEAR <= year_max, EVENT_TYPE %in% evtypes) %>%
group_by(STATE_NAME) %>%
summarise_each(funs(sum), COUNT:CROPS_DAMAGE)
# We want all states to be present even if nothing happened
left_join(states,  aggregated, by = "STATE_NAME") %>%
mutate_each(funs(replace_na), FATALITIES:CROPS_DAMAGE) %>%
mutate_each(funs(round_2), PROPERTY_DAMAGE, CROPS_DAMAGE)
}
aggregate_by_year <- function(dt, year_min, year_max, evtypes) {
round_2 <- function(x) round(x, 2)
# Filter
dt %>% filter(YEAR >= year_min, YEAR <= year_max, EVENT_TYPE %in% evtypes) %>%
# Group and aggregate
group_by(YEAR) %>% summarise_each(funs(sum), COUNT:CROPS_DAMAGE) %>%
# Round
mutate_each(funs(round_2), PROPERTY_DAMAGE, CROPS_DAMAGE) %>%
rename(
Year = YEAR, Count = COUNT,
Fatalities = FATALITIES, Injuries = INJURIES,
Property = PROPERTY_DAMAGE, Crops = CROPS_DAMAGE
)
}
#' Add Affected column based on category
#'
#' @param dt data.table
#' @param category character
#' @return data.table
#'
compute_affected <- function(dt, category) {
dt %>% mutate(Affected = {
if(category == 'both') {
INJURIES + FATALITIES
} else if(category == 'fatalities') {
FATALITIES
} else {
INJURIES
}
})
}
#' Add Damages column based on category
#'
#' @param dt data.table
#' @param category character
#' @return data.table
#'
compute_damages <- function(dt, category) {
dt %>% mutate(Damages = {
if(category == 'both') {
PROPERTY_DAMAGE + CROPS_DAMAGE
} else if(category == 'crops') {
CROPS_DAMAGE
} else {
PROPERTY_DAMAGE
}
})
}
#' Prepare map of economic or population impact
#'
#' @param dt data.table
#' @param states_map data.frame returned from map_data("state")
#' @param year_min integer
#' @param year_max integer
#' @param fill character name of the variable
#' @param title character
#' @param low character hex
#' @param high character hex
#' @return ggplot
#'
plot_impact_by_state <- function (dt, states_map, year_min, year_max, fill, title, low = "#fff5eb", high = "#d94801") {
title <- sprintf(title, year_min, year_max)
p <- ggplot(dt, aes(map_id = STATE_NAME))
p <- p + geom_map(aes_string(fill = fill), map = states_map, colour='black')
p <- p + expand_limits(x = states_map$long, y = states_map$lat)
p <- p + coord_map() + theme_bw()
p <- p + labs(x = "Long", y = "Lat", title = title)
p + scale_fill_gradient(low = low, high = high)
}
#' Prepare plots of impact by year
#'
#' @param dt data.table
#' @param dom
#' @param yAxisLabel
#' @param desc
#' @return plot
#'
plot_impact_by_year <- function(dt, dom, yAxisLabel, desc = FALSE) {
impactPlot <- nPlot(
value ~ Year, group = "variable",
data = melt(dt, id="Year") %>% arrange(Year, if (desc) { desc(variable) } else { variable }),
type = "stackedAreaChart", dom = dom, width = 650
)
impactPlot$chart(margin = list(left = 100))
impactPlot$yAxis(axisLabel = yAxisLabel, width = 80)
impactPlot$xAxis(axisLabel = "Year", width = 70)
impactPlot
}
#' Prepare plot of number of events by year
#'
#' @param dt data.table
#' @param dom
#' @param yAxisLabel
#' @return plot
plot_events_by_year <- function(dt, dom = "eventsByYear", yAxisLabel = "Count") {
eventsByYear <- nPlot(
Count ~ Year,
data = dt,
type = "lineChart", dom = dom, width = 650
)
eventsByYear$chart(margin = list(left = 100))
eventsByYear$yAxis( axisLabel = yAxisLabel, width = 80)
eventsByYear$xAxis( axisLabel = "Year", width = 70)
eventsByYear
}
#' Prepare dataset for downloads
#'
#' @param dt data.table
#' @return data.table
prepare_downloads <- function(dt) {
dt %>% rename(
State = STATE_NAME, Count = COUNT,
Injuries = INJURIES, Fatalities = FATALITIES,
Property.damage = PROPERTY_DAMAGE, Crops.damage = CROPS_DAMAGE
) %>% mutate(State=state.abb[match(State, tolower(state.name))])
}
aggregate_by_year(dt, 1950, 2015, event_types)
prepare_downloads(dt.agg())
prepare_downloads(rawdt.agg())
runApp()
runApp()
rawdt <- fread('data/StormData_to2015_after_aggregating.csv') %>% mutate(EVENT_TYPE = tolower(EVENT_TYPE))
dt <- select(rawdt, YEAR, STATE_NAME, EVENT_TYPE, COUNT, FATALITIES, INJURIES, PROPERTY_DAMAGE, CROPS_DAMAGE)
event_types <- sort(unique(dt$EVENT_TYPE))
aggregate_by_state(dt, 1950, 2015, event_types)
aggregate_by_year(dt, 1950, 2015, event_types)
prepare_downloads(dt.agg())
print(plot_impact_by_state (
dt = compute_affected(dt.agg(), input$populationCategory),
states_map = states_map,
year_min = input$range[1],
year_max = input$range[2],
title = "Population impact %d - %d (number of affected)",
fill = "Affected"
))
print(plot_impact_by_state (
dt = compute_affected(dt.agg(), input$populationCategory),
states_map = states_map,
year_min = 1950,
year_max = 2015,
title = "Population impact %d - %d (number of affected)",
fill = "Affected"
))
states_map <- map_data("state")
print(plot_impact_by_state (
dt,
states_map = states_map,
year_min = 1950,
year_max = 2015,
title = "Population impact %d - %d (number of affected)",
fill = "Affected"
))
# Prepare dataset for maps
dt.agg <- reactive({
aggregate_by_state(dt, 1950, 2015, event_types)
})
# Prepare dataset for time series
dt.agg.year <- reactive({
aggregate_by_year(dt, 1950, 2015, event_types)
})
# Prepare dataset for downloads
dataTable <- reactive({
prepare_downloads(dt.agg())
})
runApp()
runApp()
runApp()
dt1 <- fread('data/StormData_to2015_after_aggregating.csv') %>% mutate(EVENT_TYPE = tolower(EVENT_TYPE))
dt2 <- fread('data/events.agg.csv') %>% mutate(EVTYPE = tolower(EVTYPE))
unique(dt1$STATE_NAME)
unique(dt2$STATE_NAME)
unique(dt2$STATE)
write.csv(unique(dt1$STATE_NAME), file = "data/dt1_state.csv")
write.csv(unique(dt2$STATE), file = "data/dt2_state.csv")
result <- subset(dt1, STATE_NAME in c("american samoa", "atlantic north", "atlantic south", "district of columbia",
"e pacific", "guam", "gulf of alaska", "gulf of mexico", "hawaii waters", "lake erie", "lake huron",
"lake michigan", "lake ontario", "lake st clair", "lake superior", "puerto rico", "st lawrence r",
"virgin islands"))
result <- subset(dt1, STATE_NAME is c("american samoa", "atlantic north", "atlantic south", "district of columbia",
"e pacific", "guam", "gulf of alaska", "gulf of mexico", "hawaii waters", "lake erie", "lake huron",
"lake michigan", "lake ontario", "lake st clair", "lake superior", "puerto rico", "st lawrence r",
"virgin islands"))
result <- subset(dt1, STATE_NAME != c("american samoa", "atlantic north", "atlantic south", "district of columbia",
"e pacific", "guam", "gulf of alaska", "gulf of mexico", "hawaii waters", "lake erie", "lake huron",
"lake michigan", "lake ontario", "lake st clair", "lake superior", "puerto rico", "st lawrence r",
"virgin islands"))
dt1$STATE_NAME <- tolower(dt1$STATE_NAME)
result <- subset(dt1, STATE_NAME != c("american samoa", "atlantic north", "atlantic south", "district of columbia",
"e pacific", "guam", "gulf of alaska", "gulf of mexico", "hawaii waters", "lake erie", "lake huron",
"lake michigan", "lake ontario", "lake st clair", "lake superior", "puerto rico", "st lawrence r",
"virgin islands"))
result <- dt1[!dt1$STATE_NAME %in% c("american samoa", "atlantic north", "atlantic south", "district of columbia",
"e pacific", "guam", "gulf of alaska", "gulf of mexico", "hawaii waters", "lake erie", "lake huron",
"lake michigan", "lake ontario", "lake st clair", "lake superior", "puerto rico", "st lawrence r",
"virgin islands"),]
setwd("D:/GitHub/Developing_Data_Products_Assessments/ShinyWeatherApp")
library(shiny)
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("ggthemes")
library(ggthemes)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?theme_solarized
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?ggplot
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(result)
simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1,1)), substring(s, 2),
sep="", collapse=" ")
}
sapply(result$EVENT_TYPE, simpleCap)
sapply(sort(unique(result$EVENT_TYPE)), simpleCap)
shiny::runApp()
shiny::runApp()
shiny::runApp()
rawdt <- fread('data/StormData_to2015_after_aggregating.csv') %>% mutate(EVENT_TYPE = tolower(EVENT_TYPE))
rawdt$STATE_NAME <- tolower(rawdt$STATE_NAME)
rawdt$EVENT_TYPE <- sapply(dt$EVENT_TYPE, simpleCap)
View(rawdt)
shiny::runApp()
You can adjust the Year range and Event Types using the Control Panel which located on the left side. On the right side, there are 3 tabs:
shiny::runApp()
shiny::runApp()
